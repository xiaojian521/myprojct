深入理解Android_卷1

#====================================================================
第一章 阅读前的准备工作
#====================================================================
1.1 系统架构
Android是Google公司推出的一款智能手机平台,该平台本身是基于linux内核
(1) Linux内核层:包含了Linux内核和一些驱动模块(比如USB驱动,Camera驱动,蓝牙驱动等)
(2) Libraries层:这一层提供动态库(也叫共享库),Android运行时库,Dalvik虚拟机等
(3) Framwork层:这一层大部分用Java语言编写,它是Android平台上Java世界的基石
(4) Application层:与用户直接交互的就是这些应用程序,他们都是用java开发的
注: 什么是Dalvik虚拟机
Dalvik是Google公司自己设计用于Android平台的虚拟机。Dalvik虚拟机是Google等厂商合作开发的Android移动设备平台的核心组成部分之一。它可以支持已转换为 .dex（即Dalvik Executable）格式的Java应用程序的运行，.dex格式是专为Dalvik设计的一种压缩格式，适合内存和处理器速度有限的系统。Dalvik 经过优化，允许在有限的内存中同时运行多个虚拟机的实例，并且 [1]  每一个Dalvik 应用作为一个独立的Linux 进程执行。独立的进程可以防止在虚拟机崩溃的时候所有程序都被关闭。

#====================================================================
1.2 编译源码
(1) make (moudle): 会把该模块依赖的其他模块也一起编译
(2) mmm (路径/moudle): 该命令编译指定目录下的目标模块,而不编译他所依赖的模块
(3) mm (moudle): 这种方式需要先用cd命令进入目录,然后执行mm命令.该命令会编译当前目录下的模块.它和mmm一样,只编译目标模块

#====================================================================

#====================================================================
第二章 深入理解JNI
#====================================================================
2.1 JNI概述
JNI技术的推出有以下几个方面方面的考虑
承载JAVA世界的虚拟机是用Native语言写的,而虚拟机又运行在具体的平台上,所以虚拟机本身无法做到平台无关,然而,有了JNI技术后就可以对Java层屏蔽不同操作系统平台(如widows/linux)之间的差异(例如同样是打开一个文件,windows上的系统Api使用openfile函数,而linux上的api是open函数).这样,就能实现java本身的平台无关特性
注: 1. JavaVm
    JavaVM 是虚拟机在 JNI 层的代表，一个进程只有一个 JavaVM，所有的线程共用一个 JavaVM。
    2. JNIEnv
    JNIEnv 表示 Java 调用 native 语言的环境，是一个封装了几乎全部 JNI 方法的指针。
    JNIEnv 只在创建它的线程生效，不能跨线程传递，不同线程的 JNIEnv 彼此独立。
    native 环境中创建的线程，如果需要访问 JNI，必须要调用 AttachCurrentThread 关联，并使用 DetachCurrentThread 解除链接。
    3.jclass
    类引用(代表类型)
    4.jobject
    实例引用(代表实例)

#====================================================================
2.2 jstring介绍
 JAVA中的String也是引用类型,不过由于它的使用频率较高,所以在JNI规范中单独创建了一个jstring类型表示Java中的String类型
 (1) 调用JNIEnv的NewString(JNIE* env,const jchar* unicodeChars,jsize len),可以从Native的字符串得到一个jstring对象.其实,可以把一个jstring对象看成是Java中的String对象在JNI层的代表,也就是说jstring就是一个Java String.但由于Java String存储的是Unicode字符串,所以NewString函数的参数也必须是Unicode字符串
 (2)调用JNIEnv的NewStringUTF将根据Native的一个UTF-8字符串的到一个jstring对象
 (3)上面连个函数将本地字符串转换成了Java的String对象,JNIEnv还提供了GetStringChars加密手机接GetStringUTFChars函数,他们可以将JavaString对象转换成本地字符串,其中GetStringChars得到一个Unicode字符串,而GetStringUTFChars得到一个UTF-8字符串.
 (4)另外,如果在代码中调动了上面几个函数,在昨晚相关工作后,就都需要调用ReleaseStringChars函数或ReleaseStringUTFChars函数来对应地适当资源,否则会导致JVM内存泄露
注: 调用NewStringUTF创建一个jstring对象,它是Local Reference类型.
根据Local Reference的说明,函数返回后,jstring对象就会被回收.所以DeleteLocalRef调用就看起来是多余的,其实不然
 1)如果不调用DeletelocalRef,jstring将会函数返回后被回收.
 2)如果调用DeleteLocalRef,jstring会立即被回收.
 3)函数内,如果循环创建很多jstring对象没有被立即释放,而是等待函数结束后被释放,那么虚拟机内存将会很快被耗尽

#====================================================================
2.3 垃圾回收
JNI技术一共提供了三种类型的引用,它们分别是:
(1) Local Reference:本地引用.在JNI层函数中使用的非全局引用对象都是Local Reference,它包括函数调用时传入的jobject和在JNI层层函数中创建的jobject,Local Reference最大的特点就是,一旦JNI层函数返回,这些jobject就可能被垃圾回收.
(2) Global Reference: 全局引用,这种对象如不主动释放,它永远不会被垃圾回收.
(3) Weak Global Reference:弱全局引用,一种特殊的Global Reference,在运行过程中可能会被垃圾回收.所以在使用它之前,需要调用JNIEnv的IsSameObject判断它是否被回收

#====================================================================

#====================================================================
第三章 深入理解init
#====================================================================
3.1 概述
init是一个进程,确切的说,它是Linux系统中用户空间第一个进程.由于Android是基于Linux内核的.所以init也是Android系统中用户空间的第一个进程
(1)init进程负责创建系统中的几个关键进程
(2)Android系统有很多属性,于是init就提供了一个property service(属性服务)来管理它们

#====================================================================

#====================================================================
第四章 深入理解zygote
#====================================================================
4.1 关于zygote总结
zygote是在Android系统中创建Java世界的盘古,它创建了第一个Java虚拟机,同时它又是女娲,它陈宫地繁殖了framwork的核心system_server进程

#====================================================================

#====================================================================
第五章 深入理解常见类
#====================================================================
5.1 揭秘RefBase,sp和wp
ReBase是Android中所有对象的始祖,类似于MFC中的CObject及Java中的Object对象.在Android中,RefBase结合sp和wp,实现了一套通过引用计数的方法来控制对象生命周期的机制

#====================================================================

#====================================================================
第六章 深入理解Binder
#====================================================================
6.1 概述
Binder是Android系统提供的一种IPC(进程间通信)机制.由于Android是基于Linux内核的.因此,除了Binder以外,还存在其他的IPC机制,例如惯导和socket等

#====================================================================
6.2 ServiceManager存在的意义
(1) ServiceManager能集中管理系统内的所有服务,它能施加权限控制.并不是任何进程都能注册服务的
(2) ServiceManager支持通过字符串名称来找对应的Service.

#====================================================================
6.3 匿名Service
匿名Service就是没有注册的Service
(1)没有注册意味着这个Service没有在ServiceManager上zhuce
(2)它是一个Service又表示它确实是一个基于Binder通信的C/S结构

#====================================================================

#====================================================================
第七章 深入理解Audio系统
#====================================================================
7.1 概述
Audio系统是Android平台重要组成部分,它主要包括三方面的内容:
(1)AudioRecord和AudioTrack:这两个类属于Audio系统对外提供的API类,通过他们可以完成Android平台上音频数据的采集和输出任务
(2)AudioFlinger:它是Audio系统的工作引擎,管理着系统中的输入输出音频流,并承担音频数据的混音,以及读写Audio硬件等工作以实现数据的输入输出功能
(3)AudioPolicyService:它是Audio系统的策略控制中心,具体掌管系统中声音设备的选择和切换,音量控制等功能

#====================================================================
7.2 AudioTrack的数据加载模式
(1)MODE_STREAM:在这种模式下.通过write一次次把音频数据写到AudioTrack中
(2)MODE_STATIC:这种模式下,在play之前只需要把所有的数据通过一次write调用传递到AudioTrack的内部缓冲区中,后续就不必在传递数据了.这种模式适用于像铃声这种内存占用量较小,延迟要求较高的文件

7.2.1 音频流类型
在AudioTrack的构造函数中,会接触到AudioManager.STREAM_MUSIC这个参数,它的含义与Android系统对音频流的管理和分类有关,音频流类型的划分和Audio系统对音频的管理策略有关

7.2.3 AudioTrack(Java空间)的分析总结
AudioTrack在JNI层使用了Native的AudiTrack对象,总结一下调用Native对象的流程(也就是JNI层接口调用流程):



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================



#====================================================================