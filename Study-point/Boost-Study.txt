Boost库学习
#====================================================================
1. boost库安装
 (1)http://www.boost.org 下载最新版本的boost库源代码
 (2)解压进入,执行命令: ./booststrap.sh (编译前的配置工作)
 (3)执行命令: ./b2 install (编译并安装boost)
 (4)如果像上面这样不指定额外选项,Boost将编译release版本的库文件,把头文件安装到
 "/usr/local/include",库文件安装到"/usr/local/lib"

#====================================================================
2. 智能指针
 (1)scoped_ptr是一种"智能指针",因此其行为与普通的指针基本相同,可以使用非常熟悉的"*"和"->"操作符 ,它将拷贝构造函数和赋值函数都声明为私有的,不允许拷贝构造或赋值.使用scoped_ptr会带来两个好处:一是使代码变的清晰简单,而简单意味着更少的错误,二是它并没有用增加多余的操作,安全的同时保证了效率,可以获得与原始指针同样的速度

 (2)因为auto_ptr存在缺陷,C++11借鉴boost库里的智能指针
#====================================================================
3. pool库学习
pool库包含四个组成部分:最简单的pool,分配实例的object_pool,单件内存池singleton_pool和可用与标准库的pool_alloc

3.1 pool的构造函数接受一个size_type类型的整数,指示分配内存块的大小(而不是我内存池的大小)

3.2 一般情况内存池会自动管理内存分配,不应该是调用free(),除非你认为内存池的空间已经不足,必须释放已经分配的内存

3.3 pool库它只能作为普通数据类型如int,double等的内存池,不能应用于复杂的类和对象,因为它只能分配内存,不能调用构造函数,这个时候我们需要用object_pool
#====================================================================
4 object_pool库学习
object_pool是用于类实例(对象)的内存池,它的功能与pool类似,但它会在析构时对所有已经分配的内存块调用析构函数,从而正确地释放资源

4.1 一旦在模板中指定了类型,object_pool实例就不能在用于分配其他类型的对象
#====================================================================
5 assign库学习
assign库重载了赋值操作符"+=",逗号操作符",",和括号操作符"()"可以用难以想象的简介语法非常方便的对标准容器赋值或者初始化

#====================================================================
6 trilbool库学习
boost.tribool是基于三态的bool逻辑
对tribool的操作都是通过逻辑运算符和比较运算符的重载来完成的,支持的逻辑运算包括||,&&和!,比较运算支持==和!=,这些操作都可以任意混合bool和tribool一起运算

#====================================================================
7 operators库学习
boost.operators库它采用std::rel_ops的实现手法,允许用户在自己的类里仅定义少量的操作符(如"<")就可以方便地自动生成其他操作符重载,而且保证正确的语义实现
因为很多运算可以由基本运算转变而来
#====================================================================
优化的主要方式是进行等号操作符的重载和一节抽象类的定义
