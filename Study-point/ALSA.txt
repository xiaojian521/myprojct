Linux Alsa Study
#=======================================================================
资料文档:
(1)Alsa音频编程【精华】 https://www.cnblogs.com/cslunatic/p/3677729.html
(2)ALSA开发详解 https://blog.csdn.net/haohenghai/article/details/22283491
(3)ALSA之PCM分析 https://blog.csdn.net/azloong/article/details/6146378?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param
(4)ALSA分析 https://blog.csdn.net/zhang_danf/article/details/38824013?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param
(5)alsa frame period period_size buffer_size 等解释 https://blog.csdn.net/spark550/article/details/80441499

#=======================================================================
1.基本概念
(1)样本长度(sample):样本是记录音频数据的最基本的单位,计算机对每个通道采样量化时数字比特位数,常见的有8位和16位.
(2)通道数(channel):该参数1表示单声道,2则是立体声
(3)帧(frame):帧记录了一个声音单元,其长度为样本长度与通道数的乘积,一段音频数据就是由若干帧组成的.
(4)采样率(rate):每秒钟采样次数,该次数是针对帧而言的,常用的采样率如8KHz的人声,44.1KHz的mp3音乐,96KHz的蓝光音频.
(5)周期(period):音频设备一次处理所需要的帧数,对于音频设备的数据访问以及音频数据的存储,都是一次为单位的.
(6)交错模式(interleaved):是一种音频数据的记录方式
    (6.1)在交错模式下,数据以连续帧的形式存放,即首先记录完帧1的左声道样本和右声道样本(假设为立体声格式),再开始帧2的记录
    (6.2)而在非交错模式下,首先记录的是一个周期内所有帧的左声道样本,再记录右声道样本,数据是以连续通道的方式存储.
    不过多数情况下,我们只需要使用交错模式就可以了.
(7)period(周期):硬件中中断间的间隔时间.它表示输入延时.
(8)比特率(Bits Per Second):比特率表示每秒的比特数,比特率=采样率*声道数*样本长度

#=======================================================================
2. ALSA基础
ALSA由许多声卡的声卡驱动程序组成,同时它也提供一个称为libasound的API库
应用程序开发者应该使用libasound而不是内核中的ALSA接口,因为libasound提供最高级并且变成方便的编程接口.并且提供一个设备逻辑命名功能,这样开发者甚至不需要知道类似设备文件这样的低层接口.
相反,OSS/Free驱动是在内核系统调用级上变成,它要求开发者提供设备文件名并且利用ioctrl来实现相应的功能.
ALSA包含插件功能,使用插件可以扩展新的声卡驱动,包括完全用软件实现的虚拟声卡

#=======================================================================
3. ALSA体系结构
ALSA API可以分解成以下几个主要的接口:
(1)控制接口:提供管理声卡注册和请求可用设备的通用功能
(2)PCM接口:管理数字音频回放(playback)和录音(capture)的接口.
(3)Raw MIDI接口:支持MIDI(Musical Instrument Digital Interface),标准的电子乐器.这些API提供对声卡上MIDI总线的访问.这个原始接口基于MIDI事件工作,由程序员负责管理协议以及时间处理.
(4)定时器(Timer)接口:为同步音频时间提供对声卡上时间处理硬件的访问.
(5)时序器(Sequencer)接口
(6)混音器(Mixer)接口


#=======================================================================


#=======================================================================


#=======================================================================


#=======================================================================


#=======================================================================


#=======================================================================


#=======================================================================


#=======================================================================


#=======================================================================


#=======================================================================


#=======================================================================


#=======================================================================


#=======================================================================


#=======================================================================


#=======================================================================


#=======================================================================




