#=======================================================================
am start -n com.example.android.IqtTestClient/.IqtTestActivity
am start -n com.example.myapplication/.MainActivity
logcat | grep FlowControlSDK&
logcat -s "XjTest"&
logcat -s "WeCarFlow"&
logcat | grep "wecarflow"&

#=======================================================================
芮勇   1036 (PL) 10楼
谢志勇 3902 (机器问他)
王正苏 7021 (烧SOC) 7楼
曲波   2927 (烧micon) 9楼
菜雄杰 0743 (主机环境软件安装)
       1218 (com组4G模块)
吴迪   1338
肖健   1340
游俊国 1341
1921
8001
#=======================================================================
dumpsys package com.tencent.tai.pal.platformdemo | grep Activity
am start -n com.tencent.tai.pal.platformdemo/.MainActivity

dumpsys package com.tencent.wecarspeech | grep Activity
am start -n com.tencent.wecarspeech/.app.MainActivity

dumpsys package com.tencent.wecarflow | grep Activity
am start -n com.tencent.wecarflow/.MainActivity

dumpsys package com.tencent.wecarmas | grep Activity
am start -n com.tencent.wecarmas/.ui.SplashActivity

dumpsys package com.tencent.taiservice | grep Service
am startservice -n com.tencent.taiservice/com.tencent.wecarbase.SDKService
ps | grep com.tencent.taiservice:wecarbase

dumpsys package com.tencent.wecarnavi | grep Activity
am start -n com.tencent.wecarnavi/.MainActivity

com.tencent.taiservice
com.tencent.wecarflow
com.tencent.wecarmas
com.tencent.wecarnavi
com.tencent.wecarspeech

系统setting
am start com.android.settings/.Settings

#=======================================================================
DRBFM票号:      19-202-8-00223
基本设计票号:   19-202-8-00172 
详细设计票号:   19-202-8-00328 
Coding票号:     19-202-8-00460
单体票号:       19-202-8-00526 

指摘个数: /SVN/819B/Project/02_ProjectPlan/DR予実表_819B.xlsx

#=======================================================================
tinycap /extdata/test.pcm -D 0 -d 0 -c 2 -r 44100 -b 16 -p 768 -n 10
tinycap /data/file.wav -D 3 -d 0 -r 48000
tinyplay /extdata/test.wav -D 1 -d 0
tinyplay /data/file.wav -D 3 -d 0 -r 48000 -p 192 -n 16

-D  card          声卡
-d  device        设备
-c  channels      通道
-r  rate          采样率
-b  bits          pcm 位宽
-p  period_size   一次中断的帧数
-n  n_periods     周期数

#=======================================================================
1.重构爱趣听代码
2.测试爱趣听机能
3.编写爱趣听基本设计式样书
4.添加惯到接口并测试
5.代码仓库的迁移

#=======================================================================
启动安兔兔0
am start -n com.antutu.ABenchMark/.ABenchMarkStart
启动鲁大师
am start -n com.ludashi.benchmark/.SplashActivity
启动Emmagee
am start -n com.netease.qa.emmagee/.activity.MainPageActivity
#=======================================================================
zxing github下载地址
https://github.com/zxing/zxing
zxing jar包下载
http://central.maven.org/maven2/com/google/zxing/core/
Demo项目组入
https://blog.csdn.net/sakuramashiro/article/details/73929557
红色框中的文件夹是我们需要用到的。其中将 android 目录import module 导入的改名为zxing，core 是我们要编译成Jar包的，android-core 中就一个工具类，直接复制到 module 里就可以了。


#=======================================================================
CTS官网
https://source.android.com/compatibility/cts/downloads
//查看支持哪些modules
list modules 
//测试modules
run cts -m CtsDisplayTestCases(注module名字) --skip-preconditions --skip-all-system-status-check --dynamic-config-url=""
run cts -m CtsViewTestCases --skip-preconditions --skip-all-system-status-check --dynamic-config-url=""

logcat -m 0xffffffff -l 15 -e 1
logcat -s "DisplayRefreshRateTest"&
#=======================================================================
单apk性能测试工具Emmagee.apk
https://github.com/NetEase/Emmagee/releases

#=======================================================================
测试cpu占用率命令
top [ -m max_procs ] [ -n iterations ] [ -d delay ] [ -s sort_column ] [ -t ] [ -h ]
top -m 10 -d 2 &
top -t -m 10 -d 2 &
-m num  显示的最大进程数
-n num  更新num次后退出
-d num  每num秒刷新一次
-s col  将选中列(col列)的数据进行排序 (cpu,vss,rss,thr).
-H      显式线程而不是进程
-t      显式线程而不是进程
-h      help

查看GPU命令,工具mmdc
while^Jdo ^Jmmdc^Jsleep 2^Jdone & 


#=======================================================================
procrank命令
VSS - Virtual Set Size 虚拟耗用内存（包含共享库占用的内存）
RSS - Resident Set Size 实际使用物理内存（包含共享库占用的内存）
PSS - Proportional Set Size 实际使用的物理内存（比例分配共享库占用的内存）
USS - Unique Set Size 进程独自占用的物理内存（不包含共享库占用的内存）
一般来说内存占用大小有如下规律：VSS >= RSS >= PSS >= USS

#=======================================================================
pm grant 包名 权限名
dumpsys SurfaceFlinger
dumpsys window windows

am start -n com.shenyaocn.android.usbcamera/.MainActivity

#=======================================================================
编译java静态库，java共享库
https://blog.csdn.net/lin20044140410/article/details/55519026
静态连接库的特点是会在程序的编译链接阶段就完成函数和变量的地址解析工作，并使之成为可执行程序中不可分割的一部分。这种处理手段在某种程度上可以有效地实现代码的重复利用，使得编写程序不需要每次都从零开始。但是它的缺点也是明显的，即可执行程序的体积会随着静态链接库的增加而不断增大。如果系统中有多个可执行程序都用到了同一个静态库Ａ，按照静态链接的做法需要把Ａ分别打包到所有程序中，这显然是一种资源浪费。

动态链接库有２个特点：

动态链接库不需要在编译时就打包到可执行程序中，而是等到后者在运行时再实现动态的加载和　重定位。

动态链接库在被加载到内存之后，操作系统需要为他执行动态连接操作，这里也可以称为“动态链接”，前面编译阶段的链接叫“静态链接”。静态链接中也会有重定位Ｒｅｌｏｃａｔｉｏｎ，只是跟动态链接中的重定位有差异。只要涉及多个文件之间的链接，通常都需要重定位，只是静态链接发生在编译阶段，而动态链接发生在运行阶段。

动态链接库的核心优势就是代码共享，不单是进程内的代码共享，还包括进程间的代码共享。

#=======================================================================
aapt解析apk AndroidManifest.xml
aapt dump xmltree TMapAutoMainApp-official_website_20190906112415_3.1.0.1030_rb151a0_701_release.apk AndroidManifest.xml

#=======================================================================
Java 集合框架
https://www.runoob.com/java/java-collections.html

EnumSet基本用法
https://www.cnblogs.com/wgl1995/p/9401652.html

countDownLatch
https://www.jianshu.com/p/e233bb37d2e6

使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为public static final,而接口里的方法默认情况下访问权限为public。

Map<String, ?>只能是只读模式，不能增加，因为增加的时候不知道该写入什么类型的值；Map<String, Object>可以读和写，只要是所有Object类的子类都可以。
#=======================================================================
https://blog.csdn.net/qq_22120329/article/details/50948891
给apk 签名可以带来以下好处： 
1.、应用程序升级：如果你希望用户无缝升级到新的版本，那么你必须用同一个证书进行签名。这是由于只有以同一个证书签名，系统才会允许安装升级的应用程序。 如果你采用了不同的证书，那么系统会要求你的应用程序采用不同的包名称，在这种情况下相当于安装了一个全新的应用程序。如果想升级应用程序，签名证书要相同，包名称要相同！ 
2.、应用程序模块化：Android 系统可以允许同一个证书签名的多个应用程序在一个进程里运行，系统实际把他们作为一个单个的应用程序，此时就可以把我们的应用程序以模块的方式进行部署，而用户可以独立的升级其中的一个模块 
3.、代码或者数据共享：Android 提供了基于签名的权限机制，那么一个应用程序就可以为另一个以相同证书签名的应用程序公开自己的功能。以同一个证书对多个应用程序进行签名，利用基于签名的权限检查，你就可以在应用程序间以安全的方式共享代码和数据了。
 4.不同的应用程序之间，想共享数据，或者共享代码，那么要让他们运行在同一个进程中，而且要让他们用相同的证书签名。

#=======================================================================
JAVA中STATIC{}语句块详解
https://www.cnblogs.com/caolaoshi/p/7824748.html
static{}(即static块)，会在类被加载的时候执行且仅会被执行一次，一般用来初始化静态变量和调用静态方法，下面我们详细的讨论一下该语句块的特性及应用。

类加载:Java命令的作用是启动虚拟机，虚拟机通过输入流，从磁盘上将字节码文件(.class文件)中的内容读入虚拟机，并保存起来的过程就是类加载。

 类加载特性 :
      *在虚拟机的生命周期中一个类只被加载一次。
      *类加载的原则：延迟加载，能少加载就少加载，因为虚拟机的空间是有限的。
      *类加载的时机：
      1）第一次创建对象要加载类.
      2）调用静态方法时要加载类,访问静态属性时会加载类。
      3）加载子类时必定会先加载父类。
      4）创建对象引用不加载类.
      5) 子类调用父类的静态方法时
          (1)当子类没有覆盖父类的静态方法时，只加载父类，不加载子类
          (2)当子类有覆盖父类的静态方法时，既加载父类，又加载子类
      6）访问静态常量，如果编译器可以计算出常量的值，则不会加载类,例如:public static final int a =123;否则会加载类,例如:public static final int a = math.PI。

#=======================================================================
添加系统签名命令
java -Djava.library.path=. -jar signapk.jar platform.x509.pem platform.pk8 app.apk app_sign.apk

#=======================================================================
Android Framework单独编译调试
jianshu.com/p/55dbe31efccc

1.device目录下对应产品的BoardConfig.mk添加
WITH_DEXPREOPT := false
2.整个工程make clean清除，不clean的话导入后依然有问题，系统启动崩溃。
3.make -j32全编译，将所有镜像打入系统。


#=======================================================================
RemoteCallbackList 机制分析
https://blog.csdn.net/u012439416/article/details/76402516	

#=======================================================================
Android开发中，有时候try catch是可以防止崩溃的，但有时候代码加上要catch的异常，但当对应的错误出现时，代码还是会崩溃，比如IndexOutOfBoundsException，NullPointerException这两个异常，即使你做了catch，但依然会程序崩溃，所以像这样的就只能做手动的判断规避
try catch是一种异常处理机制，但是有两点需要注意。
1.只有在try块内部的代码所抛出的异常才会被捕获，如果是try块范围外的代码，就不会捕捉异常。
2.catch需要指定异常类型。只能够捕获指定的异常类型。如果发生崩溃的异常并没有列在catch中，那么也不会捕获该异常。最终导致程序崩溃。

#=======================================================================
JUnit 5.5.2 API
https://junit.org/junit5/docs/current/api/
JUnit 5用户指南
https://junit.org/junit5/docs/current/user-guide/
中文手册
https://cnfn.gitbooks.io/junit5/content/6.2.%20Migration%20Tips.html

junit4资料
https://blog.csdn.net/qq_34264849/article/details/88243278
https://www.ibm.com/developerworks/cn/java/j-lo-junit4/
https://blog.csdn.net/luanlouis/article/details/37560783
https://www.jianshu.com/p/16077065fe89

Android Junit 单元测试、异步测试方法简介及异步测试框架指南
https://www.jianshu.com/p/1ca58729bf87

junit 4.10版本
http://wiki.jikexueyuan.com/project/junit/overview.html

junit4常用注解详细说明
https://www.cnblogs.com/qlqwjy/p/8441080.html

参考资料:
https://blog.csdn.net/u013144863/article/details/79959716

Mockito教程
https://www.cnblogs.com/Ming8006/p/6297333.html
#=======================================================================
查看签名信息
~/Android/Sdk/build-tools/29.0.1$ ./apksigner verify -v --print-certs ~/桌面/TMapAutoMainApp.apk SYSTEMSERVERCLASSPATH

#=======================================================================
Android6.0关于预置三方app卸载（一） copy到data/app下
https://blog.csdn.net/kc58236582/article/details/52619684

#=======================================================================
PackageManagerService启动流程分析(上,下)
https://blog4jimmy.com/2018/10/636.html
https://blog4jimmy.com/2018/10/640.html

#=======================================================================
ubuntu修改root密码
"sudo passwd 用户名"

#=======================================================================
公司各类申请文档
http://jupiter.storm/common/_layouts/viewlsts.aspx?BaseType=1

#=======================================================================
深入浅出Android单元测试（三）详解Mockito
https://www.jianshu.com/p/600ef8c9df98
待测试应用：即开发者开发的应用，需要被单元测试代码进行测试
执行测试逻辑的应用：自动生成的应用，用于执行测试步骤与逻辑
对于getTargetContext()方法，即获取的是待测试应用的上下文。对于getContext()方法，获取的是执行测试逻辑的应用上下文。

#=======================================================================
开发机安装lxc
http://blog.sina.com.cn/s/blog_6f704fa90101hbar.html

#=======================================================================
suntest
单体测试资料
http://mediawiki.storm/index.php/819b开发网使用手顺
config配置文件
http://iautowiki.storm/Group/UnitTest/UnitTestManual
测试是否少库
./vendor/anbox/session_manager/build/src/anbox session-manager --experimental --standalone --socket-path=/home/你的用户名
#=======================================================================
下载通用词库
http://download.huzheng.org/zh_CN/

#=======================================================================
命令行修改Android系统时间
https://blog.csdn.net/harry_helei/article/details/49869961

cat /data/property/persist.sys.timezone //查看当前时区配置文件
setprop persist.sys.timezone GMT        //修改属性
dadate 1230122018.59 set      //2018/12/30/12::20::59
#=======================================================================