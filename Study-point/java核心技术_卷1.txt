JAVA核心技术_卷一

#====================================================================
第二章 Java程序设计环境
#====================================================================
java 安装包
JDK 编写java程序的程序员使用的软件
JRE 运行java程序的用户使用的软件(包含虚拟机,但不包含编译器)
SE  用于桌面或简单服务器应用的Java平台
EE  用于复杂服务器应用的Java平台
ME  用于手机和其他小型设备的Java平台

#====================================================================
第三章 Java的基本程序设计结构
#====================================================================
1.&&和||运算符是按照"短路的方式来求值的",使用||的时候要注意,可能后面的表达式没有判断

#====================================================================
2.位运算符,应用在布尔值上时,&和|运算符也会得到一个布尔值

#====================================================================
3.String类
在JVM中存在一个字符串池，其中存有很多String对象，并且可以被共享使用。当创建一个字符串常量时，例如String s="abc"，会首先在字符串常量池中查找是否存在相同的字符串定义，若已经定义，则直接引用其定义，此时不需要创建新的对象；如果没有定义，则首先创建对象，然后把他加入到字符串池中，再将他的引用返回。由于字符串是不可变类，一旦创建好了就不可修改，因此字符串对象可以被共享而且不会引起程序的混乱。
String a = "a";//创建新对象，值为"a"，丢到字符串池，返回此对象的引用给a

String b = "a";//在字符串池查找值为"a"的对象，找到，返回此对象的引用给b

b = "b";//在字符串池查找值为"b"的对象，没找到，然后创建新对象，值为"b"，丢到字符串池，返回此对象的引用给b

3.1 检测两个字符串是否相等,使用String.equal();
    不区分大小写,可以使用equalsIgnoreCase()
    一定不要使用==运算符检测连个字符串是否相等!这个运算符智能确定两个字符串是否放置在同一个位置上,当然,如果字符串放置在同一个位置上,它们必然相等.但是,完全有可能将内容相同的多个字符串的拷贝放置在不用的位置上
    如果虚拟机始终将相同的字符串共享,就可以使用==运算符检测是否相等.但实机上只有字符串常量是共享的,而+或substring等操作昌盛的结果并不是共享的,因此千万不要使用==运算符测试字符串的相等性

3.2 空串是一个java对象,有自己的串长度(0)和内容(空),String变量还可以存放一个特殊的值.名为null,这表示目前没有任何对象与该变量关联
    要检查一个字符串是否为null,要使用以下条件:
    if(str == null)
    有时要检查一个字符串即不是null也不是空串,这种情况下就需要使用一下条件:
    if(str != null && str.lenght() != 0)
    首先要检查str不为null,如果在一个null值上调用方法,会出现错误

3.3 采用字符串连接的方式达到此目的效率比较低.每次连接字符串,都会构建一个新的String对象,即耗时,又浪费空间.使用StringBuilder类可以避免这个问题.
    StringBuilder这个类的前身是StringBuffer,其效率稍有些低,但允许采用多线程的方式执行添加或删除字符的操作.如果所有字符串在一个单线程中编辑,则应该用StringBuilder替代它.这两个类的API是相同的

#====================================================================
4. Java还提供了一种带标签的break语句,用于跳出多重嵌套循环语句.
    example:
    read_data:
    while() {
        for() {
            if(true) {
                break read_data;
            }
        }
    }
    注:可以将标签应用到任何语句中,甚至可以应用到if语句或者块语句中,如下所示:
    label:
    {
        ...
        if(condition) break label; //exit block
        ...
    }
    //jump here when the break statement executes
    //只能跳出语句块,而不能跳入语句块
#====================================================================
5. 不要在boolean类型与任何数值类型之间进行强制类型转换,这样可以防止发生错误.只有极少数的情况才需要将布尔类型转换为数值类型,这时可以使用条件表达式   b ? 1 : 0

#====================================================================
6. 枚举类型 enum Size {ONE, TOW, THREE, FORE}
Size s = Size.ONE;
Size类型的变量智能存储这个类型声明中给定的某个枚举值,或者null值, null值表示这个变量没有设置任何值

#====================================================================
7.java读取标准输入,首先需要构造一个Scanner对象,并与"标准输入流"System.in关联
Scanner in = new Scanner(System.in);
因为输入是可见的,所以Scanner类不适用于从控制台读取密码.Java SE6特别引入了Console类实现这个目的.想要读取一个密码,可以采用下列代码
Consol cons = System.console();
String username = cons.readLine("User name: ");
char[] passwd = cons.readPasswod("Password: ");
注 1: 为了安全起见,返回密码存放在一维数组中,而不是字符串.在对密码进行处理后,应该马上用一个填充数值覆盖数组元素,采用Consol对象处理输入不如采用Scanner方便.每次只能读取一行输入,而没有能够读取一个单词或一个数值的方法.
注 2: 如果用一个不存在的文件构造一个Scanner,或者用一个不能被创建的文件名构造一个PrintWriter,就会发生异常

#====================================================================
8. 不能在嵌套的不同作用域中声明同名的变量
例: public static void main(Stringp[] args) {
    int n ;
    ...
    {
        int k;
        int n;//Error--can`t redefine n inner block
    }
}

#====================================================================
9.switch语句将从选项值相匹配的case标签处开始执行知道遇到break语句,或者执行到switch语句的结束位置.如果没有想匹配的case标签,而有default子句,就执行这个子句.有可能触发多个case分支.如果在case分支语句的末尾没有break语句,那么就会接着执行下一个case分支语句.这种情况非常危险,常常会引发错误.
case的标签可以是: char, byte, short,或int的常量表达式,枚举常量,从javaSE7开始,case标签还可以是字符串字面量
当在switch语句中使用枚举常量时,不必在每个标签中指明枚举名,可以由switch的表达式确定;
例:
Size sz = ...;
switch(sz) {
    case SMALL://no need to use Size.SMALL
        ...
        break;
        ...
}

#====================================================================
10. break可以跳出带有标签的语句块
例:
read_data:
while() {
    ...
    for(...) {
        break read_data;
    }
}
事实上,可以将标签应用到任何语句中,甚至可以应用到if语句或者块语句中
例:
label:
{
    ...
    if(condition) break label; //exits block
    ...
}
//jumps here when the break statement executes

#====================================================================
11. 如果将continue语句用于for循环中,就可以调到for循环的"更新"部分
例:
for(int i = 0; i < 100; ++i) {
    ...
    if(n > 5) continue;
    ...
}
如果n > 5 ,则continue语句调到++i语句
#====================================================================
12. 创建一个数字数组时,所有元素都初始化为0.boolean数组的元素会初始化为false.对象数组的元素则初始化为一个特殊值null,这表示这些元素还未存放任何对象
注:有个更简单的方式打印数组中的所有值,即利用Arrays类的toString方法.调用Arrays.toString(a),返回一个包含数组元素的字符串.这些元素被放置在括号内,并用逗号分隔,例如,"[2,3,5,7,11,13]"

#====================================================================
13. 数组初始化以及匿名数组
在java中,提供了一种创建数组对象并同时赋予初始值的简化书写形式
例:
int[] smallPrimes = {2,3,5,7,11,13}; //在使用这种语句时,不需要调用new
甚至还可以初始化一个匿名数组:
new int[] {17,19,23,29,31,37};
这种表示法将创建一个新数组并利用括号中提供的值进行初始化,数组的大小就是初始值的个数.使用这种语法形式可以在不创建新变量的情况下重新初始化一个数组
例:
smallPrime = new int[] {17,19,23,29,31,37};


#====================================================================
14

#====================================================================

#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================

#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================

#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================

#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================

#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================

#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================

#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================