JAVA核心技术_卷一

#====================================================================
第二章 Java程序设计环境
#====================================================================
java 安装包
JDK 编写java程序的程序员使用的软件
JRE 运行java程序的用户使用的软件(包含虚拟机,但不包含编译器)
SE  用于桌面或简单服务器应用的Java平台
EE  用于复杂服务器应用的Java平台
ME  用于手机和其他小型设备的Java平台

#====================================================================
第三章 Java的基本程序设计结构
#====================================================================
1.&&和||运算符是按照"短路的方式来求值的",使用||的时候要注意,可能后面的表达式没有判断

#====================================================================
2.位运算符,应用在布尔值上时,&和|运算符也会得到一个布尔值

#====================================================================
3.String类
在JVM中存在一个字符串池，其中存有很多String对象，并且可以被共享使用。当创建一个字符串常量时，例如String s="abc"，会首先在字符串常量池中查找是否存在相同的字符串定义，若已经定义，则直接引用其定义，此时不需要创建新的对象；如果没有定义，则首先创建对象，然后把他加入到字符串池中，再将他的引用返回。由于字符串是不可变类，一旦创建好了就不可修改，因此字符串对象可以被共享而且不会引起程序的混乱。
String a = "a";//创建新对象，值为"a"，丢到字符串池，返回此对象的引用给a

String b = "a";//在字符串池查找值为"a"的对象，找到，返回此对象的引用给b

b = "b";//在字符串池查找值为"b"的对象，没找到，然后创建新对象，值为"b"，丢到字符串池，返回此对象的引用给b

3.1 检测两个字符串是否相等,使用String.equal();
    不区分大小写,可以使用equalsIgnoreCase()
    一定不要使用==运算符检测连个字符串是否相等!这个运算符智能确定两个字符串是否放置在同一个位置上,当然,如果字符串放置在同一个位置上,它们必然相等.但是,完全有可能将内容相同的多个字符串的拷贝放置在不用的位置上
    如果虚拟机始终将相同的字符串共享,就可以使用==运算符检测是否相等.但实机上只有字符串常量是共享的,而+或substring等操作昌盛的结果并不是共享的,因此千万不要使用==运算符测试字符串的相等性

3.2 空串是一个java对象,有自己的串长度(0)和内容(空),String变量还可以存放一个特殊的值.名为null,这表示目前没有任何对象与该变量关联
    要检查一个字符串是否为null,要使用以下条件:
    if(str == null)
    有时要检查一个字符串即不是null也不是空串,这种情况下就需要使用一下条件:
    if(str != null && str.lenght() != 0)
    首先要检查str不为null,如果在一个null值上调用方法,会出现错误

3.3 采用字符串连接的方式达到此目的效率比较低.每次连接字符串,都会构建一个新的String对象,即耗时,又浪费空间.使用StringBuilder类可以避免这个问题.
    StringBuilder这个类的前身是StringBuffer,其效率稍有些低,但允许采用多线程的方式执行添加或删除字符的操作.如果所有字符串在一个单线程中编辑,则应该用StringBuilder替代它.这两个类的API是相同的

#====================================================================
4. Java还提供了一种带标签的break语句,用于跳出多重嵌套循环语句.
    example:
    read_data:
    while() {
        for() {
            if(true) {
                break read_data;
            }
        }
    }
    注:可以将标签应用到任何语句中,甚至可以应用到if语句或者块语句中,如下所示:
    label:
    {
        ...
        if(condition) break label; //exit block
        ...
    }
    //jump here when the break statement executes
    //只能跳出语句块,而不能跳入语句块
#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================


#====================================================================