题目整理总结:
#====================================================================
1.字符串std::string像末尾添加字符
1.1 string msg;
    msg.push_back('a');

1.2 string msg;
    msg.copy(char* str, size_type num, size_type index)
size_type copy( char *str, size_type num, size_type index );
copy()函数拷贝自己的num个字符到str中（从索引index开始）。返回值是拷贝的字符数
注需要自己手动添加"\0"

#====================================================================
2. 两个栈实现队列的方法就是一个只做输出用,一个只做输入用.存的时候像s1中存,取得时候如果s2还有值就直接取如果没有元素了则将s1的元素全部转移到s2中

#====================================================================
3. 两个队列实现栈的方法,添加就往空队列里添加,另一个队列如果有元素就全部移动到添加的队列中,取就是谁有元素取谁

#====================================================================
4. 查找元素的最小值通过STL算法
min_element(begin(), end())  参数为迭代器

#====================================================================
5. 斐波那契数列 0, 1, 1, 2 ...前两个相加等于后一个,采用递归的方法 

#====================================================================
6. 已知中序遍历和前序遍历重构二叉树,或已中序遍历和后序遍历重构二叉树,如果只是知道前序遍历和后序遍历不能重构二叉树(不能确定左右子树)
方法:采用递归的方法,先确定根节点然后再把左子树和右子树单独提取出来,然后单独的左子树和右子树又是一个单独的树,采用递归的方式进行解析

#====================================================================
7. 跳台阶或组合问题都可以通过递归的方式来解决,前提是可以不断的拆分成一个个基本类型或情况.

#====================================================================
8. 获取一个数的二进制数
">>"二进制数右移一位
void NumberOf1(int n) {
    int a;
    static int sum;
    if(n >= 0) {
        a = n % 2;
        n = n >> 1;
    }
    cout<<a<<;
    NumberOf1(n);
}

#====================================================================
9. 正负数相互转换
"~"表示二进制数全部取反
负数 = ~正数 + 1;
int change(int num)
{
	if (num < 0)
	{
		num = ~(num - 1);
	}
	else if (num >0)
	{
		num = ~num + 1;
	}
	return num;
}

#====================================================================
10 负数的补码
eg int i = -1234;
补码就是1000 - 1234 = 8766

#====================================================================

#====================================================================

#====================================================================

#====================================================================

#====================================================================