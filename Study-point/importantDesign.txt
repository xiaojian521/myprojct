#================================================================
面向对象的设计原则
1.单一职责:一个类只负责一个功能领域中的相应职责

2.开闭原则:软件实体应对扩展开放,而对修改关闭,即软件实体应尽量在不修改原有代码的情况下进行扩展(软件实体可以指一个软件模块,一个由多个类组成的局部结构或一个独立类)

3.里氏代换原则:在运用里氏代换原则时,尽量将一些需要扩展的类或者存在变化的类设计为抽象类或者借口,并将其作为基类,在程序中尽量针对基类对象进行编程,由于子类继承基类并覆盖基类的方法,在程序运行时,子类对象可以替换基类对象如果需要对类的行为进行修改,可以通过扩展基类来增加新的子类,而无需修改使用该基类对象的代码

4.依赖倒转原则:抽象不应该依赖于细节,细节应当依赖于抽象,换言之,要针对接口编程,而不是针对实现编程

5.接口隔离原则:是指使用多个专门的接口,而不使用单一的总结口,每一个接口应该承担一种相对独立的角色,不多不少,不干不该干的事

6.合成复用原则:尽量使用对象组合,而不是继承来达到复用的目的.就是在一个新的对象里通过关联关系(包括组合和聚合关系)来使用一些已有的对象,使之成为新对象的一部分人,新对象通过委派调用已有对象的方法达到复用已有功能的目的

7.迪米特法则:又称最少知道原则,是指一个软件实体应当尽可能少地与其他实体发生相互作用,这样,当一个模块修改时,就会尽量少地影响其他的模块.扩展会相对容易,这样对软件实体之间的通信的限制,它要求限制软件实体之间通信的宽度和深度.
#================================================================
https://www.cnblogs.com/jiese/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/
#================================================================
重要的设计模式(具体看网页,只记录重点及注意事项)
1.抽象工厂
当抽象工厂模式退化到只有一个产品等级结构时,即变成了工厂方法模式,当工厂方法模式的工厂类只有一个,切工厂方法为静态方法时,则变成了简单工厂模式

#================================================================
https://www.cnblogs.com/qiaoconglovelife/p/5851163.html
2.单例模式
单线程和多线程单例模式
单例大约有两种实现方法：懒汉与饿汉。
    1.懒汉：故名思义，不到万不得已就不会去实例化类，也就是说在第一次用到类实例的时候才会去实例化，所以上边的经典方法被归为懒汉实现；
    2.饿汉：饿了肯定要饥不择食。所以在单例类定义的时候就进行实例化。
　　特点与选择：
    1.由于要进行线程同步，所以在访问量比较大，或者可能访问的线程比较多时，采用饿汉实现，可以实现更好的性能。这是以空间换时间。
    2.在访问量较小时，采用懒汉实现。这是以时间换空间。

#================================================================