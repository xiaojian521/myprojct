工欲善其事必先利其器
分配任务后先去分析任务所需，了解所需内容及功能，不要急于直接完成

//============================================================
1.写代码尽量功能拆分成独立函数，方便管理

2.将函数尽量写成一个类，便于理解

3.多使用系统函数，简洁易懂

4.能用智能指针的就用智能指针 

5.分析时先分析功能，将每一个功能分成一个模块，在画类图，将类之间的关系确定

6.熟悉常用的设计模式，对于理解代码，设计代码框架帮助很大

7.做事情事前，先查阅资料，看有没有可参考，可使用的，高效有省时

8.获得任务,尽量多找demo,并且多找工具

9.不要急着写代码,先把方案和思路理清,然后在编写代码

10.理解好设计模式
//============================================================
1.函数前面加 ”::“ 指调用的是全局函数

2.explict关键字只需用于类内的单参数构造函数前面。由于无参的构造函数总是显示调用，这种情况在构造函数前面加explict无意义

3.override关键子，如果派生类在虚函数声明时使用了override描述符，那么该函数必须重载其基类中的同名函数，否则代码将无法通过编译
至此总结一下静态绑定和动态绑定的区别：
1. 静态绑定发生在编译期，动态绑定发生在运行期；
2. 对象的动态类型可以更改，但是静态类型无法更改；
3. 要想实现动态，必须使用动态绑定；
4. 在继承体系中只有虚函数使用的是动态绑定，其他的全部是静态绑定；
5. 默认参数问题在网址中需要注意
  https://www.cnblogs.com/xinxue/p/5471708.html

4.注意点：写代码尽量将功能拆分成一个独立的函数，方便管理

5.const修饰符
5.1.如果参数做输出用，不论它是什么数据类型，也不论它采用"指针传递"还是"引用传递"，都不能加const修饰，否则该参数将失去输出功能。const只能修饰输入参数
5.2.如果给以“指针穿点”方式的函数返回值加const修饰，那么函数返回值（即指针）的内容不能被修改，该返回值只能被赋给加const修饰的同类型指针，
    如果函数参数返回值采用“值传递方式”，由于函数会把返回值复制到外部临时的存储单元中，加const修饰没有任何价值
5.3.任何不会修改数据成员的函数都应该声明为const类型。如果在编写const成员函数时。不慎修改了数据成员，或者调用了其他非const成员函数，编译器将指出错误。
5.4.const int* pone;//指向整形常量的指针，它指向的值不能修改
    int* const ptwo;//指向整形的常量指针，它不能在指向别的变量，单指向（变量）的值可以修改
    https://www.cnblogs.com/azbane/p/7266747.html

6.static修饰符
6.1.static修饰的变量先于对象存在，所以static修饰的变量要在类外初始化。因为static是所有对象共享的变量，必须要比对象先存在。
6.2.由于static修饰的类成员属于类，不属于对象，因此static类成员函数是没有this指针的，this指针是指向本对象的指针。正因为没有this指针，所以static类成员函数不能访问非static的类成员，只能访问static修饰的类成员

7.强制类型转换
7.1.const_cast一般用于强制消除对象的常量属性
7.2.static_cast 
    1)用于基本数据类型的转换，如把int装换为char
    2)把空指针转换成目标类型的空指针
    3)把任何类型的表达式类型转换成void类型
    4)用于类层次结构中父类和子类之间指针和引用的转换
7.3.dynamic_casr主要用于类层次结构中父类和子类之间指针和引用的转换，由于具有运行时类型检查，因此可以保证下转换的安全性，何为安全性？即转换成功就返回转换后的正确类型指针，如果转换失败，则返回NULL，之所以说static_cast在下行转换时不安全，是因为即使转换失败，它也不返回NULL，对于上行转换，dynamic_cast和static_cast是一样的

8.智能指针
   https://www.cnblogs.com/TenosDoIt/p/3456704.html //实例
   https://blog.csdn.net/shuishanga/article/details/52982102 //详解
8.1.shared_ptr多个指针指向相同的对象。shared_ptr使用引用计数，每一个shared_ptr的拷贝都指向相同的内存。shared_ptr内部的引用计数是线程安全的，但是对象的读取需要加锁
8.2.unique_ptr“唯一”拥有其所指对象，同一时刻只能有一个unique_ptr指向给定对象(通过禁止拷贝语义、只有移动语义来实现)。unique_ptr指针本身的生命周期：从unique_ptr指针创建时开始，直到离开作用域。离开作用域时，若其指向对象，则将其所指对象销毁
8.3.weak_ptr是为了配合shared_ptr而引入的一种智能指针，因为它不具有普通指针的行为，没有重载operator*和->,它的最大作用在于协助shared_ptr工作，像旁观者那样观测资源的使用情况。weak_ptr可以从一个shared_ptr或者另一个weak_ptr对象构造，获得资源的观测全。但weak_ptr没有共享资源，它的构造不会引起指针引用计数的增加

9.enum 传统的enum关键字的作用域是全局的，也就是说，如果在enum A 中生命一个枚举类型，无法在enum B 中声明同样的枚举类型
eg 
enum A {my_enum3 = 0};
enum B {my_enum3 = 0};//是错误的
9.1.如下面这样声明和定义枚举就是正确的，要访问A和B中的枚举是需要加上作用域的
eg
enum class A {my_enum3 = 0};
enum class B {my_enum3 = 0};
enum c {my_enum3 = 0};
A a = A::my_enum3;
B b = B::my_enum3;
9.2.可以指定底层数据类型
eg
enum class A: int //每个枚举都是int类型的
{
    my_enum3 = 0;
}
enum class B: unsigned char //每个枚举都是unsigned char类型的
{
    my_enum3 = 0;
}
资料https://www.cnblogs.com/JCSU/articles/1299051.html

10.std::ref()函数可以在模板传参的时候传入引用，否则无法传递
因为thread函数是末班类所以传递引用的时候要加ref()函数

11.atomic理解https://blog.csdn.net/fengbingchun/article/details/73436710

12.C++中的关键字explicit主要是用来修饰类的构造函数，被修饰的构造函数的类，不能发生相应的隐式类型转换，只能以显示的方式进行类型转换。类构造函数默认情况下声明为隐式的即implicit
explicit关键字只能用于类内部的构造函数声明上，而不能用在类外部的函数定义(函数实现)上，它的作用是不能进行隐式转换；explicit关键字作用于单个参数的构造函数，如果构造函数有多个参数，但是从第二个参数开始，如果各参数均有默认赋值，也可以应用explicit关键字

13.c++ c_str()和data()
https://blog.csdn.net/u011352234/article/details/51701680
c_str()和data():生成一个const char*指针，指向一个临时数组
关于c_str()返回的字符串指针指向的数组，这个数组的数据是临时的，当有一个改变这些数据的成员函数被调用后，其中的数据就会失效，因此要么现用现转换。要么把它的数据复制到用户自己可以管理的内存中
区别：c_str() 返回一个指向正规C字符串的指针常量，该指针保证指向一个 size() + 1 长度的空间，而且最后一个字符肯定是 \0 ；
而 data() 返回的指针则保证指向一个size()长度的空间，不保证有没有null-terminate，可能有，可能没有，看库的实现了。

14.dlopen（）是一个计算机函数，功能是以指定模式打开指定的动态链接库文件，并返回一个句柄给dlsym（）的调用进程。使用dlclose（）来卸载打开的库,dlsym()是一个计算机函数，功能是根据动态链接库操作句柄与符号，返回符号对应的地址，不但可以获取函数地址，也可以获取变量地址

15.https://www.cnblogs.com/heartchord/p/5017071.html
 std::function是一个函数包装器模, 一个std::function类型对象实例可以包装下列这几种可调用元素类型：函数、函数指针、类成员函数指针或任意类型的函数对象.当std::function对象未包裹任何实际的可调用元素，调用该std::function对象将抛出std::bad_function_call异常

 16.http://lib.csdn.net/article/cplusplus/66969?knId=1168
 std::future future提供了用来访问异步操作结果的机制。当一个异步操作我们不可能马上获取操作结果时，就可以用同步等待的方式来获取，通过查询future的状态（future_status）来获取异步操作结果。
    std::future , std::promise实例
    https://blog.csdn.net/lijinqi1987/article/details/78507623

 17.const int&& a = 10;
 左值和右值的一个最常见的误解是：等号左边的就是左值，等号右边的就是右值。左值和右值都是针对表达式而言的，左值是指表达式结束后依然存在的持久对象，右值是指表达式结束时就不再存在的临时对象。一个区分左值与右值的便捷方法是：看能不能对表达式取地址，如果能，则为左值，否则为右值
17.1也可以用标准库提供的std::move()来将左值转换成右值引用

18.https://www.cnblogs.com/cauchy007/p/4966485.html
decltype: 有时我们希望从表达式的类型推断出要定义的变量类型，但是不想用该表达式的值初始化变量（如果要初始化就用auto了）。为了满足这一需求，C++11新标准引入了decltype类型说明符，它的作用是选择并返回操作数的数据类型，在此过程中，编译器分析表达式并得到它的类型，却不实际计算表达式的值。
decltype(expression) 可以获取表达式的类型：
1，expression 是一个函数时，decltype 返回函数的返回值类型，没有任何问题
2，expression 是单个变量时，decltype 返回变量的类型，依旧没有任何问题
2，当expression 是某个表达式时，decltype 返回表达式的值的类型，这里会有一点让人迷惑的地方


19.https://blog.csdn.net/qqagsd155451/article/details/53371176
C++11 并发指南std::condition_variable详解

20.std::bind() 
https://www.cnblogs.com/qicosmos/p/3723388.html
https://blog.csdn.net/liukang325/article/details/53668046
绑定函数，在需要的时候在使用
bind用来绑定一个函数，包括全局函数，普通成员函数，静态成员函数，operator函数，虚函数，但不包括函数重载

21.proxy命名类名
代理类，用来进行事物不想或不能进行的其他操

22.aidl
https://baike.baidu.com/item/aidl/8535672
Android系统中的进程之间不能共享内存，因此，需要提供一些机制在不同进程之间进行数据通信。因此，可以将这种可以跨进程访问的服务称为AIDL（Android Interface Definition Language）服务。
注意事项: aidl文件可以引用其它aidl文件中定义的接口，但是不能够引用你的java类文件中定义的接口

23.android::sp<> && android::wp<>
https://www.cnblogs.com/polo/p/5672856.html
sp< xxx>、wp< xxx>这样的类型定义，这其实是Android中的智能指针

24.

25.什么是IBinder
https://blog.csdn.net/yuyi533599/article/details/52425451
Binder是什么呢？首先要明白，Android的远程调用（就是跨进程调用）就是通过
IBinder实现的，下面是对android开发文档的翻译。IBinder是远程对象的基本接口，是为高性能而设计的轻量级远程调用机制的核心部分。但它不仅用于远程调用，也用于进程内调用。这个接口定义了与远程对象交互的协议。不要直接实现这个接口，而应该从Binder派生

26.c++11可变模板参数
https://www.cnblogs.com/qicosmos/p/4325949.html
template <class... T>
void f(T... args);
上面的可变模版参数的定义当中，省略号的作用有两个：
1.声明一个参数包T... args，这个参数包中可以包含0到任意个模板参数；
2.在模板定义的右边，可以将参数包展开成一个一个独立的参数

27.逗号表达式会按顺序执行，先执行前面的语句然后在将最后一个逗号后面的值赋值给变量

28.const int&& a;
https://www.cnblogs.com/davygeek/p/4211566.html
（1）非const左值引用只能绑定到非const左值；
（2）const左值引用可绑定到const左值、非const左值、const右值、非const右值；
（3）非const右值引用只能绑定到非const右值；
（4）const右值引用可绑定到const右值和非const右值

29.状态机
实例：https://blog.csdn.net/shixin_0125/article/details/78771963
     https://blog.csdn.net/lwbeyond/article/details/7572267
UML和类图：
    https://blog.csdn.net/qq_36289559/article/details/73567412

30.远程链接windows桌面：rdesktop
    rdesktop -f -a 16 192.168.40.126
    https://blog.csdn.net/richerg85/article/details/40789789

31.UML类图关系及画法
    https://www.cnblogs.com/alex-blog/articles/2704214.html

32.管理者模式，观察者模式

33.unique_ptr不共享它的指针。它无法复制到其他unique_ptr,无法通过值传递到函数，也无法用于需要副本的任何标准模板库。只能易懂unique_ptr。这意味着，内存资源所有权将转移到另一unique_ptr

34.template模板泛型编程一定要在头文件中声明和实现，不能在cpp文件中实现

35.std::promise
std::promise是C++11并发编程中常用的一个类，常配合std::future使用。其作用是在一个线程t1中保存一个类型typename T的值，可供相绑定的std::future对象在另一线程t2中获取.

36. 使用android studio 播放assets目录的音频文件
http://blog.sina.com.cn/s/blog_5de73d0b0100zex2.html
AudioTrack播放音乐
https://blog.csdn.net/java_android_c/article/details/52678265#

37. java 中的Context详解
    https://www.cnblogs.com/jingmengxintang/p/7889311.html
    主要功能:1）启动Activity
            2）启动和停止Service
            3）发送广播消息(Intent)
            4）注册广播消息(Intent)接收者
            5）可以访问APK中各种资源(如Resources和AssetManager等)
            6）可以访问Package的相关信息
            7）APK的各种权限管理

38.C++中的Lambda表达式
    https://blog.csdn.net/huyisu/article/details/46415837
    表达式格式
    [capture](parameters) mutable ->return-type{statement}
    1.[capture]：捕捉列表。捕捉列表总是出现在Lambda函数的开始处。实际上，[]是Lambda引出符。编译器根据该引出符判断接下来的代码是否是Lambda函数。捕捉列表能够捕捉上下文中的变量以供Lambda函数使用;

    2.(parameters)：参数列表。与普通函数的参数列表一致。如果不需要参数传递，则可以连同括号“()”一起省略;

    3.mutable：mutable修饰符。默认情况下，Lambda函数总是一个const函数，mutable可以取消其常量性。在使用该修饰符时，参数列表不可省略（即使参数为空）;

    4.->return-type：返回类型。用追踪返回类型形式声明函数的返回类型。我们可以在不需要返回值的时候也可以连同符号”->”一起省略。此外，在返回类型明确的情况下，也可以省略该部分，让编译器对返回类型进行推导;

    5.{statement}：函数体。内容与普通函数一样，不过除了可以使用参数之外，还可以使用所有捕获的变量。

38.什么是SDK和API
    https://blog.csdn.net/qq_41273126/article/details/80315737
    SDK下包的说明：
    1：add-ons：Android开发需要的第三方文件和软件库
    2：docs：Android的文档。包括开发指南、API参考、资源等
    3：extras：扩展的附加包
    4：platforms：你安装下载的所有Android平台，分版本存放
    5：platform-tools：平台相关的工具
    6：samples：所有的样例程序
    7：system-images：系统使用的图片
    8：temp：临时操作或缓存的目录
    9：tools：应用Android平台进行开发所需要的一些开发工具

39.android binder - 客户端(c++层) 调用 服务端(java层)，服务端回调客户端 例子
    https://blog.csdn.net/lzl_cl/article/details/74614996

40.[C++11]std::packaged_task介绍及使用
    https://blog.csdn.net/godmaycry/article/details/72868559
    C++11之std::future和std::promise和std::std::packaged_task区别
    https://www.cnblogs.com/wangshaowei/p/8875501.html

41.Json使用rapidjson使用文档
    http://rapidjson.org/zh-cn/classrapidjson_1_1_generic_member_iterator.html

42.pugi解析xml文档
    https://pugixml.org/docs/manual.html
    http://www.w3school.com.cn/xpath/xpath_syntax.asp  //XPath语法详解
    https://blog.csdn.net/u013366022/article/details/78581522?utm_source=blogxgwz0

43.repo详解
    //http://www.cnblogs.com/helloworldtoyou/p/6430545.html?utm_source=itdadao&utm_medium=referral

44.github上的alexa源代码
    https://github.com/alexa/avs-device-sdk
    alexa sdk congfig
    https://developer.amazon.com/zh/alexa-voice-service/sdk

45.书籍下载网址
    https://github.com/justjavac/free-programming-books-zh_CN

46.extends和implements的区别
    https://blog.csdn.net/tolcf/article/details/46135645

47.java Dom4j解析xml教程
    http://www.cnblogs.com/alsf/p/9278816.html
    JAVA中的四种JSON解析方式详解
    https://blog.csdn.net/xingfei_work/article/details/76572550

48.安装qt5的qmake不能使用
    解决：sudo apt-get install qt5-default

49.chrome免费主题
    http://www.themebeta.com/

50.protobuf学习
    https://developers.google.com/protocol-buffers/docs/cpptutorial
    https://blog.csdn.net/mynameislu/article/details/78645880    实例

51.java API文档
    http://tool.oschina.net/apidocs/apidoc?api=jdk-zh

52.安装java8
    http://tipsonubuntu.com/2016/07/31/install-oracle-java-8-9-ubuntu-16-04-linux-mint-18/

53.加一层中间层做法
    1.在类中加一个父类,和要调用的函数名称,参数相同.
    2.加一个注册函数,子类添加父类的子类,来实现具体的实现
    3.在调用的地方调用注册函数创建子类并调用
    4.如果子类很多在父类中添加链表来管理子类
    
54.java很好的一个学习视频网址
   https://github.com/open-android/Android

55.QT API文档
   http://www.kuqin.com/qtdocument/

56.JNI学习java和C/C++交互
    https://blog.csdn.net/yuzhou_zang/article/details/78410632
    https://www.cnblogs.com/adm1989/archive/2013/01/07/2849514.html//java调用C++

57.PocketSphinx语音识别系统的编程
   https://www.cnblogs.com/woshijpf/articles/3633300.html

58.java匿名内部类
   https://www.cnblogs.com/nerxious/archive/2013/01/25/2876489.html

59.Android消息处理机制(Handler 与Message)
   https://www.cnblogs.com/fuck1/p/5513412.html
   https://blog.csdn.net/zrf1335348191/article/details/50716983//更详细
   https://www.cnblogs.com/cheneasternsun/p/5467115.html

60.ThreadLocal
   https://blog.csdn.net/moakun/article/details/79911989
   https://www.cnblogs.com/dolphin0520/p/3920407.html

60.java线程Thread和Runnable的区别
   https://www.cnblogs.com/yangdy/p/5274455.html
   实现Runnable接口比继承Thread类所具有的优势：
   1）：适合多个相同的程序代码的线程去处理同一个资源
   2）：可以避免java中的单继承的限制
   3）：增加程序的健壮性，代码可以被多个线程共享，代码和数据独立

61.Android开发——Intent和Bundle的区别
   https://blog.csdn.net/na604365019/article/details/8042977

62.Intent与Intentfilter的区别
   https://blog.csdn.net/zhang1223665986/article/details/80876870
   
63.Android Bundle详解
   https://blog.csdn.net/suncherrydream/article/details/52974500

64.Android Lifecycle详解
   https://blog.csdn.net/u011897062/article/details/82107755

65.IPC、Binder、AIDL与Intent之间区别与联系
   https://blog.csdn.net/jinxinliu1/article/details/70174591
   
66.Android系统分析之AIDL跨进程通信机制的使用和原理分析
   https://blog.csdn.net/chenliguan/article/details/53576362
   
67.Android studio添加jar包的方式
   https://blog.csdn.net/zhw1551706847/article/details/77709142

68.Android Gson使用详解
   https://juejin.im/post/5aad29f8518825558453c6c9

69.cmake详解
   https://blog.csdn.net/zhanghm1995/article/details/80902807

70.java设计模式实例
   https://github.com/JamesZBL/java_design_patterns

71.C++设计模式
  https://www.cnblogs.com/jiese/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/

72.JNI在C代码中添加Android log
头文件:
#include <android/log.h>
示例:
__android_log_print(ANDROID_LOG_DEBUG, "VrJNI", "JNIHelper::CallBackVrMsg" + 变量);
.mk文件中添加:
LOCAL_LDLIBS := -L$(SYSROOT)/usr/lib -llog

73.Qt中的signal和slot
   https://www.cnblogs.com/cheneasternsun/p/5467115.html

74.java反射机制
   https://www.cnblogs.com/ysocean/p/6516248.html

75.C++参考手册
   https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5

76.dlopen参数详解
   https://blog.csdn.net/u013684730/article/details/73027515

77.cordova原理详解
   https://www.cnblogs.com/StephenWu/p/6580362.html
   https://www.cnblogs.com/StephenWu/p/6580632.html
   https://www.cnblogs.com/cr330326/p/7082821.html //os平台

78.C++ 静态绑定,动态绑定
   https://www.cnblogs.com/AndyJee/p/4575670.html

//============================================================